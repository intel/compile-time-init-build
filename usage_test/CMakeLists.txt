if(DEFINED ENV{USER_CMAKE_VERSION})
    message(STATUS "Required minimum cmake version: $ENV{USER_CMAKE_VERSION}")
    cmake_minimum_required(VERSION $ENV{USER_CMAKE_VERSION})
endif()
message(STATUS "Actual cmake version: ${CMAKE_VERSION}")

project(cib_usage)

include(${CMAKE_CURRENT_LIST_DIR}/../cmake/get_cpm.cmake)
cpmaddpackage(NAME compile-time-init-build SOURCE_DIR
              "${CMAKE_CURRENT_LIST_DIR}/.." GIT_TAG HEAD)

function(add_app NAME FILE LIB)
    add_executable(${NAME} ${FILE})
    target_link_libraries(${NAME} PRIVATE ${LIB})
    if(CPP_IMPLEMENTATION STREQUAL "FREESTANDING")
        target_compile_definitions(${NAME} PRIVATE SIMULATE_FREESTANDING)
        target_compile_options(${NAME} PRIVATE -ffreestanding)
    endif()
endfunction()

add_app(app_cib main_cib.cpp cib)
add_app(app_flow main_flow.cpp cib_flow)
add_app(app_interrupt main_interrupt.cpp cib_interrupt)
add_app(app_log main_log.cpp cib_log)
add_app(app_log_binary main_log_binary.cpp cib_log_binary)
add_app(app_log_fmt main_log_fmt.cpp cib_log_fmt)
add_app(app_lookup main_lookup.cpp cib_lookup)
add_app(app_match main_match.cpp cib_match)
add_app(app_msg main_msg.cpp cib_msg)
add_app(app_nexus main_nexus.cpp cib_nexus)
add_app(app_seq main_seq.cpp cib_seq)
